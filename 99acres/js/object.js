K = Object(n.a)(
  {
    formattedRequest: "Y",
    listing: Object(n.a)(
      {
        propName: e.values.project.value.label,
        propertyType: e.values.propertyType.value,
        postedAs:
          e.userState.userData && e.userState.userData.user
            ? e.userState.userData.user.userClass
            : "O",
        postedBy: e.userState.userData
          ? e.userState.userData.user.profileId
          : "",
        profileId: e.userState.userData.user.superProfileId
          ? e.userState.userData.user.superProfileId
          : e.userState.userData.user.profileId,
        userType: e.userState.userData
          ? e.userState.userData.user.userClass
          : "",
        propertySpecification: "",
        ownership: e.values.ownership.value,
        transactType: "1",
        bedroomNum: e.values.bedroomNum.value,
        bathroomNum: e.values.bathroomNum.value,
        washroomNumber: e.values.washroomNumber.value,
        balconyNum: e.values.balconyNum.value,
        rentalAttributes:
          JSON.stringify(o(e)) === JSON.stringify({})
            ? null
            : JSON.stringify(o(e)),
        wheelChairFriendly: e.values.wheelChairFriendly.value ? "Y" : "N",
        cornerProperty: e.values.cornerProperty.value ? "Y" : "N",
        isMainRoadProperty: e.values.mainRoadFacing.value,
        rentalIncome: e.values.expectedRental.value,
        availabilityDate: e.values.availabilityDate.value,
        numberOfProperties: e.values.numberOfProperties.value,
        totalRooms: e.values.totalRooms.value,
        petFriendly: e.values.petFriendly.value ? "Y" : "N",
        additionalRooms: e.values.additionalRooms.value.toString(),
        description: e.values.description.value,
        descriptionAutogenerated: e.values.description.isAutoGenerated,
        listingCategory: e.values.resCom.value,
        availabilityMonth: e.values.availabilityMonth.value,
        preference: e.values.preference.value,
        qualityRating: e.values.qualityRating.value,
        totalFloor: e.values.totalFloor.value,
        availability: e.values.availability.value,
        noticeDuration:
          e.values.noticeDuration.value === s.a.NONE
            ? ""
            : e.values.noticeDuration.value,
        rentAgreementDuration: e.values.rentAgreementDuration.value,
        sharingCount:
          "1" == e.values.sharingType.value ? e.values.sharingCount.value : 1,
        capacity: e.values.capacity.value,
        minimumContractDuration:
          e.lockInPeriod && e.lockInPeriod.visible
            ? Object(y.a)(e, "lockInPeriod")
            : e.values.minimumContractDuration.value,
        boostingQuantity: "",
        boostingQuantityType: "",
        pricing: Object(n.a)({}, A(e), {}, T(e), {
          earlyLeavingChargesType:
            e.values.earlyLeavingChargesType.value === s.a.NONE
              ? ""
              : e.values.earlyLeavingChargesType.value,
          earlyLeavingCharges: e.values.earlyLeavingCharges.value,
          electricityWaterCharges: e.values.electricityWaterCharges.value
            ? "Y"
            : "N",
          taxGovtCharges: e.values.taxGovtCharges.value ? "Y" : "N",
          yearlyRentIncrement: p(Object(y.a)(e, "rentIncrement")),
          inclusiveDgUpsPrice: Object(y.a)(e, "dgUpsPriceIncluded"),
          assuredReturns: p(Object(y.a)(e, "assuredReturns")),
          leaseGuarantee: p(Object(y.a)(e, "leaseGuarantee")),
        }),
        houseRules: O(e),
        specification: {
          facing: e.values.facing.value,
          features: Object(P.a)(e).toString(),
          isBoundaryWallMade: e.values.isBoundaryWallMade.value ? "Y" : "N",
          powerBackup: e.values.powerBackup.value,
          widthOfFacingRoad: e.values.widthOfFacingRoad.value,
          widthOfFacingRoadUnit: e.values.widthOfFacingRoadUnit.value,
          overlooking: e.values.overlooking.value.toString(),
          waterSource: e.values.waterSource.value.toString(),
          withinGatedCommunity: e.values.withinGatedCommunity.value ? "Y" : "N",
          reservedParking: JSON.stringify(i(e)),
          furnish: e.values.furnish.value,
          furnishingAttributes: W(e),
          flooring:
            e.bsFlooring && e.bsFlooring.visible
              ? e.values.bsFlooring.value
              : e.values.flooring.value || "",
          bathroomAttached: e.values.bathroomAttached.value ? "Y" : "N",
          balconyAttached: e.values.balconyAttached.value ? "Y" : "N",
          commonFurnishingAttributes: V(e),
          bedsNum: e.values.bedsNum.value,
          stairCases: p(Object(y.a)(e, "staircaseNum")),
          haveFireNOC: !!+Object(y.a)(e, "fireNoc"),
          haveOccupancyCertificate: !!+Object(y.a)(e, "occupancyCertificate"),
          haveModernLift: !!Object(y.a)(e, "modernLiftsAvailable"),
          privateLifts: p(Object(y.a)(e, "passengerLifts")) || null,
          serviceLifts: p(Object(y.a)(e, "serviceLifts")) || null,
          totalParkingCount: p(Object(y.a)(e, "parkingCount")),
          havePvtBasementParking: !!Object(y.a)(
            e,
            "privateBasementParkingAvailable"
          ),
          havePvtOpenParking: !!Object(y.a)(
            e,
            "privateOutsideParkingAvailable"
          ),
          havePublicParking: Q()
            ? !!Object(y.a)(e, "publicParkingAvailable") ||
              Object(y.a)(e, "parkingTypes").indexOf("2") > -1
            : null,
          havePvtParking: Q()
            ? Object(y.a)(e, "parkingTypes").indexOf("1") > -1
            : null,
          haveMultilevelParking: Q()
            ? Object(y.a)(e, "parkingTypes").indexOf("3") > -1
            : null,
          constructionWallStatus: p(Object(y.a)(e, "wallsType")),
          locatedNear: Object(y.a)(e, "locatedNear").toString(),
          entranceWidth: p(Object(y.a)(e, "entranceWidth")),
          entranceWidthUnit: p(Object(y.a)(e, "entranceWidthUnit")),
          ceilingHeight: p(Object(y.a)(e, "ceilingHeight")),
          ceilingHeightUnit: p(Object(y.a)(e, "ceilingHeightUnit")),
          suitableForBusinessTypes: B(e),
          suggestedUsp: Object(y.a)(e, "suggestUsp"),
        },
        priceEstimatorAttribute: N(e),
        price: Object(n.a)(
          {},
          h(e),
          {},
          E(e),
          {},
          _(e),
          {},
          w(e),
          {
            inclusive: e.values.inclusive.value ? "Y" : "N",
            negotiable: e.values.negotiable.value ? "Y" : "N",
            perUnitArea: e.values.pricePerUnitArea.value,
          },
          L(e),
          {},
          R(e)
        ),
        verified: {
          status: e.values.verifyListing.value ? "Y" : "N",
        },
        area: v(e),
        location: Object(n.a)({}, Object(l.c)(e), {}, j(e), {}, D(e)),
        media: {
          photos: a.includes("photos") ? null : Object(C.a)(e),
        },
      },
      Object(S.a)(e),
      {
        projectUnitFloorPlanId: Object(y.a)(e, "floorPlanId"),
        availableRooms: Object(y.a)(e, "availableRooms"),
        officeSpecification: d(e),
        preLeaseDetails: b(e),
        locationAdvantages: F(e),
        topUsp: M(e),
      }
    ),
    mediaUploadChannels: I(e),
    dropoutId: e.dropoutId,
  },
  t
);
